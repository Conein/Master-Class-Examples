OBJECT Table 91 User Setup
{
  OBJECT-PROPERTIES
  {
    Date=04-11-15;
    Time=19:47:19;
    Modified=Yes;
    Version List=NAVW19.00,Exercise 1;
  }
  PROPERTIES
  {
    OnDelete=VAR
               NotificationSetup@1000 : Record 1512;
             BEGIN
               NotificationSetup.SETRANGE("User ID","User ID");
               NotificationSetup.DELETEALL(TRUE);
             END;

    CaptionML=ENU=User Setup;
    LookupPageID=Page119;
    DrillDownPageID=Page119;
  }
  FIELDS
  {
    { 1   ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnValidate=VAR
                                                                UserMgt@1000 : Codeunit 418;
                                                              BEGIN
                                                                UserMgt.ValidateUserID("User ID");
                                                              END;

                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   CaptionML=ENU=User ID;
                                                   NotBlank=Yes }
    { 2   ;   ;Allow Posting From  ;Date          ;CaptionML=ENU=Allow Posting From }
    { 3   ;   ;Allow Posting To    ;Date          ;CaptionML=ENU=Allow Posting To }
    { 4   ;   ;Register Time       ;Boolean       ;CaptionML=ENU=Register Time }
    { 10  ;   ;Salespers./Purch. Code;Code10      ;TableRelation=Salesperson/Purchaser.Code;
                                                   OnValidate=VAR
                                                                UserSetup@1000 : Record 91;
                                                              BEGIN
                                                                IF "Salespers./Purch. Code" <> '' THEN BEGIN
                                                                  UserSetup.SETCURRENTKEY("Salespers./Purch. Code");
                                                                  UserSetup.SETRANGE("Salespers./Purch. Code","Salespers./Purch. Code");
                                                                  IF UserSetup.FINDFIRST THEN
                                                                    ERROR(Text001,"Salespers./Purch. Code",UserSetup."User ID");
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Salespers./Purch. Code }
    { 11  ;   ;Approver ID         ;Code50        ;TableRelation="User Setup"."User ID";
                                                   OnValidate=BEGIN
                                                                IF "Approver ID" = "User ID" THEN
                                                                  FIELDERROR("Approver ID");
                                                              END;

                                                   OnLookup=VAR
                                                              UserSetup@1000 : Record 91;
                                                            BEGIN
                                                              UserSetup.SETFILTER("User ID",'<>%1',"User ID");
                                                              IF PAGE.RUNMODAL(PAGE::"Approval User Setup",UserSetup) = ACTION::LookupOK THEN
                                                                VALIDATE("Approver ID",UserSetup."User ID");
                                                            END;

                                                   CaptionML=ENU=Approver ID }
    { 12  ;   ;Sales Amount Approval Limit;Integer;OnValidate=BEGIN
                                                                IF "Unlimited Sales Approval" AND ("Sales Amount Approval Limit" <> 0) THEN
                                                                  ERROR(Text003,FIELDCAPTION("Sales Amount Approval Limit"),FIELDCAPTION("Unlimited Sales Approval"));
                                                                IF "Sales Amount Approval Limit" < 0 THEN
                                                                  ERROR(Text005);
                                                              END;

                                                   CaptionML=ENU=Sales Amount Approval Limit;
                                                   BlankZero=Yes }
    { 13  ;   ;Purchase Amount Approval Limit;Integer;
                                                   OnValidate=BEGIN
                                                                IF "Unlimited Purchase Approval" AND ("Purchase Amount Approval Limit" <> 0) THEN
                                                                  ERROR(Text003,FIELDCAPTION("Purchase Amount Approval Limit"),FIELDCAPTION("Unlimited Purchase Approval"));
                                                                IF "Purchase Amount Approval Limit" < 0 THEN
                                                                  ERROR(Text005);
                                                              END;

                                                   CaptionML=ENU=Purchase Amount Approval Limit;
                                                   BlankZero=Yes }
    { 14  ;   ;Unlimited Sales Approval;Boolean   ;OnValidate=BEGIN
                                                                IF "Unlimited Sales Approval" THEN
                                                                  "Sales Amount Approval Limit" := 0;
                                                              END;

                                                   CaptionML=ENU=Unlimited Sales Approval }
    { 15  ;   ;Unlimited Purchase Approval;Boolean;OnValidate=BEGIN
                                                                IF "Unlimited Purchase Approval" THEN
                                                                  "Purchase Amount Approval Limit" := 0;
                                                              END;

                                                   CaptionML=ENU=Unlimited Purchase Approval }
    { 16  ;   ;Substitute          ;Code50        ;TableRelation="User Setup"."User ID";
                                                   OnValidate=BEGIN
                                                                IF Substitute = "User ID" THEN
                                                                  FIELDERROR(Substitute);
                                                              END;

                                                   OnLookup=VAR
                                                              UserSetup@1000 : Record 91;
                                                            BEGIN
                                                              UserSetup.SETFILTER("User ID",'<>%1',"User ID");
                                                              IF PAGE.RUNMODAL(PAGE::"Approval User Setup",UserSetup) = ACTION::LookupOK THEN
                                                                VALIDATE(Substitute,UserSetup."User ID");
                                                            END;

                                                   CaptionML=ENU=Substitute }
    { 17  ;   ;E-Mail              ;Text100       ;ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=E-Mail }
    { 19  ;   ;Request Amount Approval Limit;Integer;
                                                   OnValidate=BEGIN
                                                                IF "Unlimited Request Approval" AND ("Request Amount Approval Limit" <> 0) THEN
                                                                  ERROR(Text003,FIELDCAPTION("Request Amount Approval Limit"),FIELDCAPTION("Unlimited Request Approval"));
                                                                IF "Request Amount Approval Limit" < 0 THEN
                                                                  ERROR(Text005);
                                                              END;

                                                   CaptionML=ENU=Request Amount Approval Limit;
                                                   BlankZero=Yes }
    { 20  ;   ;Unlimited Request Approval;Boolean ;OnValidate=BEGIN
                                                                IF "Unlimited Request Approval" THEN
                                                                  "Request Amount Approval Limit" := 0;
                                                              END;

                                                   CaptionML=ENU=Unlimited Request Approval }
    { 21  ;   ;Approval Administrator;Boolean     ;OnValidate=VAR
                                                                UserSetup@1000 : Record 91;
                                                              BEGIN
                                                                IF "Approval Administrator" THEN BEGIN
                                                                  UserSetup.SETRANGE("Approval Administrator",TRUE);
                                                                  IF NOT UserSetup.ISEMPTY THEN
                                                                    FIELDERROR("Approval Administrator");
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Approval Administrator }
    { 950 ;   ;Time Sheet Admin.   ;Boolean       ;CaptionML=ENU=Time Sheet Admin. }
    { 5600;   ;Allow FA Posting From;Date         ;CaptionML=ENU=Allow FA Posting From }
    { 5601;   ;Allow FA Posting To ;Date          ;CaptionML=ENU=Allow FA Posting To }
    { 5700;   ;Sales Resp. Ctr. Filter;Code10     ;TableRelation="Responsibility Center".Code;
                                                   CaptionML=ENU=Sales Resp. Ctr. Filter }
    { 5701;   ;Purchase Resp. Ctr. Filter;Code10  ;TableRelation="Responsibility Center";
                                                   CaptionML=ENU=Purchase Resp. Ctr. Filter }
    { 5900;   ;Service Resp. Ctr. Filter;Code10   ;TableRelation="Responsibility Center";
                                                   CaptionML=ENU=Service Resp. Ctr. Filter }
    { 50000;  ;Example Enabled     ;Boolean        }
  }
  KEYS
  {
    {    ;User ID                                 ;Clustered=Yes }
    {    ;Salespers./Purch. Code                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=The %1 Salesperson/Purchaser code is already assigned to another User ID %2.';
      Text003@1002 : TextConst 'ENU="You cannot have both a %1 and %2. "';
      Text005@1004 : TextConst 'ENU=You cannot have approval limits less than zero.';

    BEGIN
    END.
  }
}

OBJECT Table 201 Resource Price
{
  OBJECT-PROPERTIES
  {
    Date=16-11-15;
    Time=13:36:58;
    Modified=Yes;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Resource Price;
    LookupPageID=Page204;
    DrillDownPageID=Page204;
  }
  FIELDS
  {
    { 2   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Resource,Group(Resource),All;
                                                   OptionString=Resource,Group(Resource),All }
    { 3   ;   ;Code                ;Code20        ;TableRelation=IF (Type=CONST(Resource)) Resource
                                                                 ELSE IF (Type=CONST("Group(Resource)")) "Resource Group";
                                                   OnValidate=BEGIN
                                                                IF (Code <> '') AND (Type = Type::All) THEN
                                                                  FIELDERROR(Code,STRSUBSTNO(Text000,FIELDCAPTION(Type),FORMAT(Type)));
                                                              END;

                                                   CaptionML=ENU=Code }
    { 4   ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   CaptionML=ENU=Work Type Code }
    { 5   ;   ;Unit Price          ;Decimal       ;CaptionML=ENU=Unit Price;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 6   ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 50000;  ;Super Special Price ;Boolean        }
  }
  KEYS
  {
    {    ;Type,Code,Work Type Code,Currency Code,Super Special Price;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=cannot be specified when %1 is %2';

    BEGIN
    END.
  }
}

OBJECT Table 50000 Example Setup
{
  OBJECT-PROPERTIES
  {
    Date=26-11-15;
    Time=14:10:19;
    Modified=Yes;
    Version List=Exercise 1;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Example Enabled     ;Boolean       ;CaptionML=ENU=Example Enabled }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE InitSetupRecord@50000();
    BEGIN
      IF GET THEN BEGIN
        INIT;
        INSERT;
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 2 Company-Initialize
{
  OBJECT-PROPERTIES
  {
    Date=04-11-15;
    Time=19:58:46;
    Modified=Yes;
    Version List=NAVW19.00,Exercise 1;
  }
  PROPERTIES
  {
    OnRun=VAR
            BankPmtApplRule@1003 : Record 1252;
            TransformationRule@1005 : Record 1237;
            ApplicationLaunchMgt@1001 : Codeunit 403;
            AddOnIntegrMgt@1000 : Codeunit 5403;
            WorkflowSetup@1004 : Codeunit 1502;
            Window@1002 : Dialog;
          BEGIN
            Window.OPEN(Text000);

            InitSetupTables;
            AddOnIntegrMgt.InitMfgSetup;
            InitSourceCodeSetup;
            InitStandardTexts;
            InitReportSelection;
            InitJobWIPMethods;
            InitBankExportImportSetup;
            InitBankDataConversionPmtType;
            InitBankClearingStandard;
            InitBankDataConvServiceSetup;
            InitOcrServiceSetup;
            InitDocExchServiceSetup;
            BankPmtApplRule.InsertDefaultMatchingRules;
            ApplicationLaunchMgt.InsertStyleSheets;
            InsertClientAddIns;
            InitVATRegNrValidationSetup;
            WorkflowSetup.InitWorkflow;
            TransformationRule.CreateDefaultTransformations;
            InitElectronicFormats;
            InitExampleAddOn;

            Window.CLOSE;

            IF STRPOS(COMPANYNAME,Text093) = 1 THEN
              EXIT;

            COMMIT;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Initializing company...';
      SEPACTCodeTxt@1076 : TextConst '@@@=No need to translate - but can be translated at will.;ENU=SEPACT';
      SEPACTNameTxt@1083 : TextConst 'ENU=SEPA Credit Transfer';
      SEPADDCodeTxt@1033 : TextConst '@@@=No need to translate - but can be translated at will.;ENU=SEPADD';
      SEPADDNameTxt@1020 : TextConst 'ENU=SEPA Direct Debit';
      Text001@1001 : TextConst 'ENU=SALES';
      Text002@1002 : TextConst 'ENU=Sales';
      Text003@1003 : TextConst 'ENU=PURCHASES';
      Text004@1004 : TextConst 'ENU=Purchases';
      Text005@1005 : TextConst 'ENU=DELETE';
      Text006@1006 : TextConst 'ENU=INVTPCOST';
      Text007@1007 : TextConst 'ENU=EXCHRATADJ';
      Text010@1010 : TextConst 'ENU=CLSINCOME';
      Text011@1011 : TextConst 'ENU=CONSOLID';
      Text012@1012 : TextConst 'ENU=Consolidation';
      Text013@1013 : TextConst 'ENU=GENJNL';
      Text014@1014 : TextConst 'ENU=SALESJNL';
      Text015@1015 : TextConst 'ENU=PURCHJNL';
      Text016@1016 : TextConst 'ENU=CASHRECJNL';
      Text017@1017 : TextConst 'ENU=PAYMENTJNL';
      Text018@1018 : TextConst 'ENU=ITEMJNL';
      Text020@1019 : TextConst 'ENU=PHYSINVJNL';
      Text022@1021 : TextConst 'ENU=RESJNL';
      Text023@1022 : TextConst 'ENU=JOBJNL';
      Text024@1023 : TextConst 'ENU=SALESAPPL';
      Text025@1024 : TextConst 'ENU=Sales Entry Application';
      PaymentReconJnlTok@1169 : TextConst '@@@=Payment Reconciliation Journal Code;ENU=PAYMTRECON';
      Text026@1025 : TextConst 'ENU=PURCHAPPL';
      Text027@1026 : TextConst 'ENU=Purchase Entry Application';
      Text028@1027 : TextConst 'ENU=VATSTMT';
      Text029@1028 : TextConst 'ENU=COMPRGL';
      Text030@1029 : TextConst 'ENU=COMPRVAT';
      Text031@1030 : TextConst 'ENU=COMPRCUST';
      Text032@1031 : TextConst 'ENU=COMPRVEND';
      Text035@1034 : TextConst 'ENU=COMPRRES';
      Text036@1035 : TextConst 'ENU=COMPRJOB';
      Text037@1036 : TextConst 'ENU=COMPRBANK';
      Text038@1037 : TextConst 'ENU=COMPRCHECK';
      Text039@1038 : TextConst 'ENU=FINVOIDCHK';
      Text040@1039 : TextConst 'ENU=Financially Voided Check';
      Text041@1040 : TextConst 'ENU=REMINDER';
      Text042@1041 : TextConst 'ENU=Reminder';
      Text043@1042 : TextConst 'ENU=FINCHRG';
      Text044@1043 : TextConst 'ENU=Finance Charge Memo';
      Text045@1044 : TextConst 'ENU=FAGLJNL';
      Text046@1045 : TextConst 'ENU=FAJNL';
      Text047@1046 : TextConst 'ENU=INSJNL';
      Text048@1047 : TextConst 'ENU=COMPRFA';
      Text049@1048 : TextConst 'ENU=COMPRMAINT';
      Text050@1049 : TextConst 'ENU=COMPRINS';
      Text051@1050 : TextConst 'ENU=ADJADDCURR';
      Text052@1051 : TextConst 'ENU=MD';
      Text053@1052 : TextConst 'ENU=Monthly Depreciation';
      Text054@1053 : TextConst 'ENU=SC';
      Text055@1054 : TextConst 'ENU=Shipping Charge';
      Text056@1055 : TextConst 'ENU=SUC';
      Text057@1056 : TextConst 'ENU=Sale under Contract';
      Text058@1057 : TextConst 'ENU=TE';
      Text059@1058 : TextConst 'ENU=Travel Expenses';
      Text063@1062 : TextConst 'ENU=TRANSFER';
      Text064@1063 : TextConst 'ENU=Transfer';
      Text065@1064 : TextConst 'ENU=RECLASSJNL';
      Text066@1065 : TextConst 'ENU=REVALJNL';
      Text067@1066 : TextConst 'ENU=CONSUMPJNL';
      Text068@1067 : TextConst 'ENU=INVTADJMT';
      Text069@1069 : TextConst 'ENU=POINOUTJNL';
      Text070@1073 : TextConst 'ENU=CAPACITJNL';
      Text071@1107 : TextConst 'ENU=WHITEM';
      Text072@1105 : TextConst 'ENU=WHPHYSINVT';
      Text073@1068 : TextConst 'ENU=WHRCLSSJNL';
      Text074@1070 : TextConst 'ENU=SERVICE';
      Text075@1074 : TextConst 'ENU=Service Management';
      Text076@1075 : TextConst 'ENU=BANKREC';
      Text077@1077 : TextConst 'ENU=WHPUTAWAY';
      Text078@1078 : TextConst 'ENU=WHPICK';
      Text079@1079 : TextConst 'ENU=WHMOVEMENT';
      Text080@1080 : TextConst 'ENU=Whse. Put-away';
      Text081@1081 : TextConst 'ENU=Whse. Pick';
      Text082@1082 : TextConst 'ENU=Whse. Movement';
      Text083@1100 : TextConst 'ENU=COMPRWHSE';
      Text084@1106 : TextConst 'ENU=INTERCOMP';
      Text085@1108 : TextConst 'ENU=Intercompany';
      Text086@1114 : TextConst 'ENU=UNAPPSALES';
      Text087@1113 : TextConst 'ENU=Unapplied Sales Entry Application';
      Text088@1112 : TextConst 'ENU=UNAPPPURCH';
      Text089@1111 : TextConst 'ENU=Unapplied Purchase Entry Application';
      Text090@1110 : TextConst 'ENU=REVERSAL';
      Text091@1109 : TextConst 'ENU="Reversal Entry "';
      Text092@1115 : TextConst 'ENU=PRODORDER';
      Text093@1059 : TextConst 'ENU=CRONUS';
      Text99000004@1071 : TextConst 'ENU=FLUSHING';
      Text99000005@1072 : TextConst 'ENU=Flushing';
      Text096@1008 : TextConst 'ENU=JOBGLJNL';
      Text097@1009 : TextConst 'ENU=JOBGLWIP';
      Text098@1122 : TextConst 'ENU=WIP Entry';
      Text099@1123 : TextConst 'ENU=Date Compress Job Ledge';
      Text100@1032 : TextConst '@@@="{Locked} ";ENU=COMPRIBUDG';
      Text101@1117 : TextConst 'ENU=Completed Contract';
      Text102@1116 : TextConst 'ENU=Cost of Sales';
      Text103@1101 : TextConst 'ENU=Cost Value';
      Text104@1061 : TextConst 'ENU=Sales Value';
      Text105@1060 : TextConst 'ENU=Percentage of Completion';
      Text106@1084 : TextConst 'ENU=POC';
      Text109@1127 : TextConst '@@@=Uppercase of the translation of cash flow work sheet with a max of 10 char;ENU=CFWKSH';
      Text110@1128 : TextConst 'ENU=Cash Flow Worksheet';
      Text107@1121 : TextConst '@@@=Uppercase of the translation of assembly with a max of 10 char;ENU=ASSEMBLY';
      Text108@1125 : TextConst 'ENU=Assembly';
      Text111@1130 : TextConst 'ENU=GL';
      Text112@1131 : TextConst 'ENU=G/L Entry to Cost Accounting';
      Text113@1132 : TextConst '@@@=Uppercase of the translation of cost accounting journal with a max of 10 char;ENU=CAJOUR';
      Text114@1133 : TextConst 'ENU=Cost Journal';
      Text115@1134 : TextConst '@@@=Uppercase of the translation of allocation with a max of 10 char;ENU=ALLOC';
      Text116@1135 : TextConst 'ENU=Cost Allocation';
      Text117@1137 : TextConst '@@@=Uppercase of the translation of Transfer Budget to Actual with a max of 10 char;ENU=TRABUD';
      Text118@1138 : TextConst 'ENU=Transfer Budget to Actual';
      BankClearingStandardCode1Tok@1085 : TextConst '@@@={Locked};ENU=AustrianBankleitzahl';
      BankClearingStandardDesc1Txt@1086 : TextConst 'ENU=Austrian BLZ number';
      BankClearingStandardCode2Tok@1088 : TextConst '@@@={Locked};ENU=CanadianPaymentsARN';
      BankClearingStandardDesc2Txt@1087 : TextConst 'ENU=Canadian ARN number';
      BankClearingStandardCode3Tok@1090 : TextConst '@@@={Locked};ENU=CHIPSParticipant';
      BankClearingStandardDesc3Txt@1089 : TextConst 'ENU=American CHIPS number';
      BankClearingStandardCode4Tok@1092 : TextConst '@@@={Locked};ENU=CHIPSUniversal';
      BankClearingStandardDesc4Txt@1091 : TextConst 'ENU=American CHIPS universal number';
      BankClearingStandardCode5Tok@1094 : TextConst '@@@={Locked};ENU=ExtensiveBranchNetwork';
      BankClearingStandardDesc5Txt@1093 : TextConst 'ENU=Extensive branch network number';
      BankClearingStandardCode6Tok@1096 : TextConst '@@@={Locked};ENU=FedwireRoutingNumber';
      BankClearingStandardDesc6Txt@1095 : TextConst 'ENU=American Fedwire/ABA routing number';
      BankClearingStandardCode7Tok@1098 : TextConst '@@@={Locked};ENU=GermanBankleitzahl';
      BankClearingStandardDesc7Txt@1097 : TextConst 'ENU=German BLZ number';
      BankClearingStandardCode8Tok@1102 : TextConst '@@@={Locked};ENU=HongKongBank';
      BankClearingStandardDesc8Txt@1099 : TextConst 'ENU=Hong Kong branch number';
      BankClearingStandardCode9Tok@1104 : TextConst '@@@={Locked};ENU=IrishNSC';
      BankClearingStandardDesc9Txt@1103 : TextConst 'ENU=Irish NSC number';
      BankClearingStandardCode10Tok@1119 : TextConst '@@@={Locked};ENU=ItalianDomestic';
      BankClearingStandardDesc10Txt@1118 : TextConst 'ENU=Italian domestic code';
      BankClearingStandardCode11Tok@1124 : TextConst '@@@={Locked};ENU=NewZealandNCC';
      BankClearingStandardDesc11Txt@1120 : TextConst 'ENU=New Zealand NCC number';
      BankClearingStandardCode12Tok@1129 : TextConst '@@@={Locked};ENU=PortugueseNCC';
      BankClearingStandardDesc12Txt@1126 : TextConst 'ENU=Portuguese NCC number';
      BankClearingStandardCode13Tok@1139 : TextConst '@@@={Locked};ENU=RussianCentralBankIdentificationCode';
      BankClearingStandardDesc13Txt@1136 : TextConst 'ENU=Russian CBI code';
      BankClearingStandardCode14Tok@1143 : TextConst '@@@={Locked};ENU=SouthAfricanNCC';
      BankClearingStandardDesc14Txt@1142 : TextConst 'ENU=South African NCC number';
      BankClearingStandardCode15Tok@1145 : TextConst '@@@={Locked};ENU=SpanishDomesticInterbanking';
      BankClearingStandardDesc15Txt@1144 : TextConst 'ENU=Spanish domestic interbanking number';
      BankClearingStandardCode16Tok@1147 : TextConst '@@@={Locked};ENU=SwissBC';
      BankClearingStandardDesc16Txt@1146 : TextConst 'ENU=Swiss BC number';
      BankClearingStandardCode17Tok@1151 : TextConst '@@@={Locked};ENU=SwissSIC';
      BankClearingStandardDesc17Txt@1150 : TextConst 'ENU=Swiss SIC number';
      BankClearingStandardCode18Tok@1149 : TextConst '@@@={Locked};ENU=UKDomesticSortCode';
      BankClearingStandardDesc18Txt@1148 : TextConst 'ENU=British sorting code';
      BankDataConvPmtTypeCode1Tok@1140 : TextConst '@@@={Locked};ENU=IntAcc2Acc';
      BankDataConvPmtTypeDesc1Txt@1141 : TextConst 'ENU=International account to account transfer (standard)';
      BankDataConvPmtTypeCode2Tok@1152 : TextConst '@@@={Locked};ENU=IntAcc2AccExp';
      BankDataConvPmtTypeDesc2Txt@1153 : TextConst 'ENU=International account to account transfer (express)';
      BankDataConvPmtTypeCode3Tok@1155 : TextConst '@@@={Locked};ENU=IntAcc2AccFoFa';
      BankDataConvPmtTypeDesc3Txt@1154 : TextConst 'ENU=International account to account transfer';
      BankDataConvPmtTypeCode4Tok@1157 : TextConst '@@@={Locked};ENU=IntAcc2AccHighVal';
      BankDataConvPmtTypeDesc4Txt@1156 : TextConst 'ENU=International account to account transfer (high value)';
      BankDataConvPmtTypeCode5Tok@1159 : TextConst '@@@={Locked};ENU=IntAcc2AccInterComp';
      BankDataConvPmtTypeDesc5Txt@1158 : TextConst 'ENU=International account to account transfer (inter company)';
      BankDataConvPmtTypeCode6Tok@1161 : TextConst '@@@={Locked};ENU=DomAcc2Acc';
      BankDataConvPmtTypeDesc6Txt@1160 : TextConst 'ENU=Domestic account to account transfer';
      BankDataConvPmtTypeCode7Tok@1163 : TextConst '@@@={Locked};ENU=DomAcc2AccHighVal';
      BankDataConvPmtTypeDesc7Txt@1162 : TextConst 'ENU=Domestic account to account transfer (high value)';
      BankDataConvPmtTypeCode8Tok@1165 : TextConst '@@@={Locked};ENU=DomAcc2AccInterComp';
      BankDataConvPmtTypeDesc8Txt@1164 : TextConst 'ENU=Domestic account to account transfer (inter company)';
      BankDataConvPmtTypeCode9Tok@1167 : TextConst '@@@={Locked};ENU=EurAcc2AccSepa';
      BankDataConvPmtTypeDesc9Txt@1166 : TextConst 'ENU=SEPA credit transfer';
      PEPPOL21_ElectronicFormatTxt@1168 : TextConst '@@@={Locked};ENU=PEPPOL 2.1';
      PEPPOL21_ElectronicFormatDescriptionTxt@1170 : TextConst 'ENU=PEPPOL 2.1 Format (Pan-European Public Procurement Online)';
      PEPPOL20_ElectronicFormatTxt@1172 : TextConst '@@@={Locked};ENU=PEPPOL 2.0';
      PEPPOL20_ElectronicFormatDescriptionTxt@1171 : TextConst 'ENU=PEPPOL 2.0 Format (Pan-European Public Procurement Online)';

    LOCAL PROCEDURE InitSetupTables@3();
    VAR
      GLSetup@1025 : Record 98;
      SalesSetup@1024 : Record 311;
      PurchSetup@1023 : Record 312;
      InvtSetup@1022 : Record 313;
      ResourcesSetup@1021 : Record 314;
      JobsSetup@1020 : Record 315;
      HumanResourcesSetup@1019 : Record 5218;
      MarketingSetup@1018 : Record 5079;
      InteractionTemplateSetup@1017 : Record 5122;
      ServiceMgtSetup@1016 : Record 5911;
      NonstockItemSetup@1015 : Record 5719;
      FASetup@1014 : Record 5603;
      CashFlowSetup@1007 : Record 843;
      CostAccSetup@1006 : Record 1108;
      WhseSetup@1004 : Record 5769;
      AssemblySetup@1002 : Record 905;
      VATReportSetup@1000 : Record 743;
      ConfigSetup@1001 : Record 8627;
      IncomingDocumentsSetup@1008 : Record 131;
      CompanyInfo@1003 : Record 79;
      SocialListeningSetup@1005 : Record 870;
    BEGIN
      WITH GLSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH SalesSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH MarketingSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH InteractionTemplateSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH ServiceMgtSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH SocialListeningSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT(TRUE);
        END;

      WITH PurchSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH InvtSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH ResourcesSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH JobsSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH FASetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH HumanResourcesSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH WhseSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH NonstockItemSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH CashFlowSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH CostAccSetup DO
        IF WRITEPERMISSION THEN
          IF NOT FINDFIRST THEN BEGIN
            INIT;
            INSERT;
          END;

      WITH AssemblySetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH VATReportSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH ConfigSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH IncomingDocumentsSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH CompanyInfo DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;
    END;

    LOCAL PROCEDURE InitSourceCodeSetup@9();
    VAR
      SourceCode@1001 : Record 230;
      SourceCodeSetup@1000 : Record 242;
    BEGIN
      IF NOT (SourceCodeSetup.FINDFIRST OR SourceCode.FINDFIRST) THEN
        WITH SourceCodeSetup DO BEGIN
          INIT;
          InsertSourceCode(Sales,Text001,Text002);
          InsertSourceCode(Purchases,Text003,Text004);
          InsertSourceCode("Deleted Document",Text005,COPYSTR(FIELDCAPTION("Deleted Document"),1,30));
          InsertSourceCode("Inventory Post Cost",Text006,ReportName(REPORT::"Post Inventory Cost to G/L"));
          InsertSourceCode("Exchange Rate Adjmt.",Text007,ReportName(REPORT::"Adjust Exchange Rates"));
          InsertSourceCode("Close Income Statement",Text010,ReportName(REPORT::"Close Income Statement"));
          InsertSourceCode(Consolidation,Text011,Text012);
          InsertSourceCode("General Journal",Text013,PageName(PAGE::"General Journal"));
          InsertSourceCode("Sales Journal",Text014,PageName(PAGE::"Sales Journal"));
          InsertSourceCode("Purchase Journal",Text015,PageName(PAGE::"Purchase Journal"));
          InsertSourceCode("Cash Receipt Journal",Text016,PageName(PAGE::"Cash Receipt Journal"));
          InsertSourceCode("Payment Journal",Text017,PageName(PAGE::"Payment Journal"));
          InsertSourceCode("Payment Reconciliation Journal",PaymentReconJnlTok,PageName(PAGE::"Payment Reconciliation Journal"));
          InsertSourceCode("Item Journal",Text018,PageName(PAGE::"Item Journal"));
          InsertSourceCode(Transfer,Text063,Text064);
          InsertSourceCode("Item Reclass. Journal",Text065,PageName(PAGE::"Item Reclass. Journal"));
          InsertSourceCode("Phys. Inventory Journal",Text020,PageName(PAGE::"Phys. Inventory Journal"));
          InsertSourceCode("Revaluation Journal",Text066,PageName(PAGE::"Revaluation Journal"));
          InsertSourceCode("Consumption Journal",Text067,PageName(PAGE::"Consumption Journal"));
          InsertSourceCode("Output Journal",Text069,PageName(PAGE::"Output Journal"));
          InsertSourceCode("Production Journal",Text092,PageName(PAGE::"Production Journal"));
          InsertSourceCode("Capacity Journal",Text070,PageName(PAGE::"Capacity Journal"));
          InsertSourceCode("Resource Journal",Text022,PageName(PAGE::"Resource Journal"));
          InsertSourceCode("Job Journal",Text023,PageName(PAGE::"Job Journal"));
          InsertSourceCode("Job G/L Journal",Text096,PageName(PAGE::"Job G/L Journal"));
          InsertSourceCode("Job G/L WIP",Text097,Text098);
          InsertSourceCode("Sales Entry Application",Text024,Text025);
          InsertSourceCode("Unapplied Sales Entry Appln.",Text086,Text087);
          InsertSourceCode("Unapplied Purch. Entry Appln.",Text088,Text089);
          InsertSourceCode(Reversal,Text090,Text091);
          InsertSourceCode("Purchase Entry Application",Text026,Text027);
          InsertSourceCode("VAT Settlement",Text028,ReportName(REPORT::"Calc. and Post VAT Settlement"));
          InsertSourceCode("Compress G/L",Text029,ReportName(REPORT::"Date Compress General Ledger"));
          InsertSourceCode("Compress VAT Entries",Text030,ReportName(REPORT::"Date Compress VAT Entries"));
          InsertSourceCode("Compress Cust. Ledger",Text031,ReportName(REPORT::"Date Compress Customer Ledger"));
          InsertSourceCode("Compress Vend. Ledger",Text032,ReportName(REPORT::"Date Compress Vendor Ledger"));
          InsertSourceCode("Compress Res. Ledger",Text035,ReportName(REPORT::"Date Compress Resource Ledger"));
          InsertSourceCode("Compress Job Ledger",Text036,Text099);
          InsertSourceCode("Compress Bank Acc. Ledger",Text037,ReportName(REPORT::"Date Compress Bank Acc. Ledger"));
          InsertSourceCode("Compress Check Ledger",Text038,ReportName(REPORT::"Delete Check Ledger Entries"));
          InsertSourceCode("Financially Voided Check",Text039,Text040);
          InsertSourceCode(Reminder,Text041,Text042);
          InsertSourceCode("Finance Charge Memo",Text043,Text044);
          InsertSourceCode("Trans. Bank Rec. to Gen. Jnl.",Text076,ReportName(REPORT::"Trans. Bank Rec. to Gen. Jnl."));
          InsertSourceCode("Fixed Asset G/L Journal",Text045,PageName(PAGE::"Fixed Asset G/L Journal"));
          InsertSourceCode("Fixed Asset Journal",Text046,PageName(PAGE::"Fixed Asset Journal"));
          InsertSourceCode("Insurance Journal",Text047,PageName(PAGE::"Insurance Journal"));
          InsertSourceCode("Compress FA Ledger",Text048,ReportName(REPORT::"Date Compress FA Ledger"));
          InsertSourceCode("Compress Maintenance Ledger",Text049,ReportName(REPORT::"Date Compress Maint. Ledger"));
          InsertSourceCode("Compress Insurance Ledger",Text050,ReportName(REPORT::"Date Compress Insurance Ledger"));
          InsertSourceCode("Adjust Add. Reporting Currency",Text051,ReportName(REPORT::"Adjust Add. Reporting Currency"));
          InsertSourceCode(Flushing,Text99000004,Text99000005);
          InsertSourceCode("Adjust Cost",Text068,ReportName(REPORT::"Adjust Cost - Item Entries"));
          InsertSourceCode("Compress Item Budget",Text100,ReportName(REPORT::"Date Comp. Item Budget Entries"));
          InsertSourceCode("Whse. Item Journal",Text071,PageName(PAGE::"Whse. Item Journal"));
          InsertSourceCode("Whse. Phys. Invt. Journal",Text072,PageName(PAGE::"Whse. Phys. Invt. Journal"));
          InsertSourceCode("Whse. Reclassification Journal",Text073,PageName(PAGE::"Whse. Reclassification Journal"));
          InsertSourceCode("Compress Whse. Entries",Text083,ReportName(REPORT::"Date Compress Whse. Entries"));
          InsertSourceCode("Whse. Put-away",Text077,Text080);
          InsertSourceCode("Whse. Pick",Text078,Text081);
          InsertSourceCode("Whse. Movement",Text079,Text082);
          InsertSourceCode("Service Management",Text074,Text075);
          InsertSourceCode("IC General Journal",Text084,Text085);
          InsertSourceCode("Cash Flow Worksheet",Text109,Text110);
          InsertSourceCode(Assembly,Text107,Text108);
          InsertSourceCode("G/L Entry to CA",Text111,Text112);
          InsertSourceCode("Cost Journal",Text113,Text114);
          InsertSourceCode("Cost Allocation",Text115,Text116);
          InsertSourceCode("Transfer Budget to Actual",Text117,Text118);
          INSERT;
        END;
    END;

    LOCAL PROCEDURE InitStandardTexts@11();
    VAR
      StandardText@1000 : Record 7;
    BEGIN
      IF NOT StandardText.FINDFIRST THEN BEGIN
        InsertStandardText(Text052,Text053);
        InsertStandardText(Text054,Text055);
        InsertStandardText(Text056,Text057);
        InsertStandardText(Text058,Text059);
      END;
    END;

    LOCAL PROCEDURE InitReportSelection@13();
    VAR
      ReportSelections@1000 : Record 77;
    BEGIN
      WITH ReportSelections DO
        IF NOT FINDFIRST THEN BEGIN
          InsertRepSelection(Usage::"S.Quote",'1',REPORT::"Sales - Quote");
          InsertRepSelection(Usage::"S.Blanket",'1',REPORT::"Blanket Sales Order");
          InsertRepSelection(Usage::"S.Order",'1',REPORT::"Order Confirmation");
          InsertRepSelection(Usage::"S.Work Order",'1',REPORT::"Work Order");
          InsertRepSelection(Usage::"S.Invoice",'1',REPORT::"Sales - Invoice");
          InsertRepSelection(Usage::"S.Return",'1',REPORT::"Return Order Confirmation");
          InsertRepSelection(Usage::"S.Cr.Memo",'1',REPORT::"Sales - Credit Memo");
          InsertRepSelection(Usage::"S.Shipment",'1',REPORT::"Sales - Shipment");
          InsertRepSelection(Usage::"S.Ret.Rcpt.",'1',REPORT::"Sales - Return Receipt");
          InsertRepSelection(Usage::"S.Test",'1',REPORT::"Sales Document - Test");
          InsertRepSelection(Usage::"P.Quote",'1',REPORT::"Purchase - Quote");
          InsertRepSelection(Usage::"P.Blanket",'1',REPORT::"Blanket Purchase Order");
          InsertRepSelection(Usage::"P.Order",'1',REPORT::Order);
          InsertRepSelection(Usage::"P.Invoice",'1',REPORT::"Purchase - Invoice");
          InsertRepSelection(Usage::"P.Return",'1',REPORT::"Return Order");
          InsertRepSelection(Usage::"P.Cr.Memo",'1',REPORT::"Purchase - Credit Memo");
          InsertRepSelection(Usage::"P.Receipt",'1',REPORT::"Purchase - Receipt");
          InsertRepSelection(Usage::"P.Ret.Shpt.",'1',REPORT::"Purchase - Return Shipment");
          InsertRepSelection(Usage::"P.Test",'1',REPORT::"Purchase Document - Test");
          InsertRepSelection(Usage::"B.Stmt",'1',REPORT::"Bank Account Statement");
          InsertRepSelection(Usage::"B.Recon.Test",'1',REPORT::"Bank Acc. Recon. - Test");
          InsertRepSelection(Usage::"B.Check",'1',REPORT::Check);
          InsertRepSelection(Usage::Reminder,'1',REPORT::Reminder);
          InsertRepSelection(Usage::"Fin.Charge",'1',REPORT::"Finance Charge Memo");
          InsertRepSelection(Usage::"Rem.Test",'1',REPORT::"Reminder - Test");
          InsertRepSelection(Usage::"F.C.Test",'1',REPORT::"Finance Charge Memo - Test");
          InsertRepSelection(Usage::Inv1,'1',REPORT::"Transfer Order");
          InsertRepSelection(Usage::Inv2,'1',REPORT::"Transfer Shipment");
          InsertRepSelection(Usage::Inv3,'1',REPORT::"Transfer Receipt");
          InsertRepSelection(Usage::"Invt. Period Test",'1',REPORT::"Close Inventory Period - Test");
          InsertRepSelection(Usage::"Prod. Order",'1',REPORT::"Prod. Order - Job Card");
          InsertRepSelection(Usage::M1,'1',REPORT::"Prod. Order - Job Card");
          InsertRepSelection(Usage::M2,'1',REPORT::"Prod. Order - Mat. Requisition");
          InsertRepSelection(Usage::M3,'1',REPORT::"Prod. Order - Shortage List");
          InsertRepSelection(Usage::"SM.Quote",'1',REPORT::"Service Quote");
          InsertRepSelection(Usage::"SM.Order",'1',REPORT::"Service Order");
          InsertRepSelection(Usage::"SM.Invoice",'1',REPORT::"Service - Invoice");
          InsertRepSelection(Usage::"SM.Credit Memo",'1',REPORT::"Service - Credit Memo");
          InsertRepSelection(Usage::"SM.Shipment",'1',REPORT::"Service - Shipment");
          InsertRepSelection(Usage::"SM.Contract Quote",'1',REPORT::"Service Contract Quote");
          InsertRepSelection(Usage::"SM.Contract",'1',REPORT::"Service Contract");
          InsertRepSelection(Usage::"SM.Test",'1',REPORT::"Service Document - Test");
          InsertRepSelection(Usage::"Asm. Order",'1',REPORT::"Assembly Order");
          InsertRepSelection(Usage::"P.Assembly Order",'1',REPORT::"Posted Assembly Order");
          InsertRepSelection(Usage::"S.Test Prepmt.",'1',REPORT::"Sales Prepmt. Document Test");
          InsertRepSelection(Usage::"P.Test Prepmt.",'1',REPORT::"Purchase Prepmt. Doc. - Test");
          InsertRepSelection(Usage::"S.Arch. Quote",'1',REPORT::"Archived Sales Quote");
          InsertRepSelection(Usage::"S.Arch. Order",'1',REPORT::"Archived Sales Order");
          InsertRepSelection(Usage::"P.Arch. Quote",'1',REPORT::"Archived Purchase Quote");
          InsertRepSelection(Usage::"P.Arch. Order",'1',REPORT::"Archived Purchase Order");
          InsertRepSelection(Usage::"P. Arch. Return Order",'1',REPORT::"Arch.Purch. Return Order");
          InsertRepSelection(Usage::"S. Arch. Return Order",'1',REPORT::"Arch. Sales Return Order");
          InsertRepSelection(Usage::"S.Order Pick Instruction",'1',REPORT::"Pick Instruction");
          InsertRepSelection(Usage::"C.Statement",'1',REPORT::Statement);
        END;
    END;

    LOCAL PROCEDURE InitJobWIPMethods@15();
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      IF NOT JobWIPMethod.FINDFIRST THEN BEGIN
        InsertJobWIPMethod(Text101,Text101,JobWIPMethod."Recognized Costs"::"At Completion",
          JobWIPMethod."Recognized Sales"::"At Completion",4);
        InsertJobWIPMethod(Text102,Text102,JobWIPMethod."Recognized Costs"::"Cost of Sales",
          JobWIPMethod."Recognized Sales"::"Contract (Invoiced Price)",2);
        InsertJobWIPMethod(Text103,Text103,JobWIPMethod."Recognized Costs"::"Cost Value",
          JobWIPMethod."Recognized Sales"::"Contract (Invoiced Price)",0);
        InsertJobWIPMethod(Text104,Text104,JobWIPMethod."Recognized Costs"::"Usage (Total Cost)",
          JobWIPMethod."Recognized Sales"::"Sales Value",1);
        InsertJobWIPMethod(Text106,Text105,JobWIPMethod."Recognized Costs"::"Usage (Total Cost)",
          JobWIPMethod."Recognized Sales"::"Percentage of Completion",3);
      END;
    END;

    LOCAL PROCEDURE InitBankExportImportSetup@14();
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      IF NOT BankExportImportSetup.FINDFIRST THEN BEGIN
        InsertBankExportImportSetup(SEPACTCodeTxt,SEPACTNameTxt,BankExportImportSetup.Direction::Export,
          CODEUNIT::"SEPA CT-Export File",XMLPORT::"SEPA CT pain.001.001.03",CODEUNIT::"SEPA CT-Check Line");
        InsertBankExportImportSetup(SEPADDCodeTxt,SEPADDNameTxt,BankExportImportSetup.Direction::Export,
          CODEUNIT::"SEPA DD-Export File",XMLPORT::"SEPA DD pain.008.001.02",CODEUNIT::"SEPA DD-Check Line");
      END;
    END;

    LOCAL PROCEDURE InitBankClearingStandard@18();
    VAR
      BankClearingStandard@1000 : Record 1280;
    BEGIN
      IF NOT BankClearingStandard.FINDFIRST THEN BEGIN
        InsertBankClearingStandard(BankClearingStandardCode1Tok,BankClearingStandardDesc1Txt);
        InsertBankClearingStandard(BankClearingStandardCode2Tok,BankClearingStandardDesc2Txt);
        InsertBankClearingStandard(BankClearingStandardCode3Tok,BankClearingStandardDesc3Txt);
        InsertBankClearingStandard(BankClearingStandardCode4Tok,BankClearingStandardDesc4Txt);
        InsertBankClearingStandard(BankClearingStandardCode5Tok,BankClearingStandardDesc5Txt);
        InsertBankClearingStandard(BankClearingStandardCode6Tok,BankClearingStandardDesc6Txt);
        InsertBankClearingStandard(BankClearingStandardCode7Tok,BankClearingStandardDesc7Txt);
        InsertBankClearingStandard(BankClearingStandardCode8Tok,BankClearingStandardDesc8Txt);
        InsertBankClearingStandard(BankClearingStandardCode9Tok,BankClearingStandardDesc9Txt);
        InsertBankClearingStandard(BankClearingStandardCode10Tok,BankClearingStandardDesc10Txt);
        InsertBankClearingStandard(BankClearingStandardCode11Tok,BankClearingStandardDesc11Txt);
        InsertBankClearingStandard(BankClearingStandardCode12Tok,BankClearingStandardDesc12Txt);
        InsertBankClearingStandard(BankClearingStandardCode13Tok,BankClearingStandardDesc13Txt);
        InsertBankClearingStandard(BankClearingStandardCode14Tok,BankClearingStandardDesc14Txt);
        InsertBankClearingStandard(BankClearingStandardCode15Tok,BankClearingStandardDesc15Txt);
        InsertBankClearingStandard(BankClearingStandardCode16Tok,BankClearingStandardDesc16Txt);
        InsertBankClearingStandard(BankClearingStandardCode17Tok,BankClearingStandardDesc17Txt);
        InsertBankClearingStandard(BankClearingStandardCode18Tok,BankClearingStandardDesc18Txt);
      END;
    END;

    LOCAL PROCEDURE InitBankDataConvServiceSetup@19();
    VAR
      BankDataConvServiceSetup@1000 : Record 1260;
      BankDataConvServMgt@1001 : Codeunit 1265;
    BEGIN
      IF NOT BankDataConvServiceSetup.GET THEN BEGIN
        BankDataConvServiceSetup.INIT;
        BankDataConvServiceSetup.INSERT;
        BankDataConvServMgt.SetURLsToDefault(BankDataConvServiceSetup);
      END;
    END;

    LOCAL PROCEDURE InitOcrServiceSetup@10();
    VAR
      OCRServiceSetup@1000 : Record 1270;
    BEGIN
      WITH OCRServiceSetup DO
        IF NOT GET THEN BEGIN
          INIT;
          INSERT;
        END;
    END;

    LOCAL PROCEDURE InitDocExchServiceSetup@26();
    VAR
      DocExchServiceSetup@1000 : Record 1275;
    BEGIN
      WITH DocExchServiceSetup DO
        IF NOT GET THEN BEGIN
          INIT;
          INSERT;
        END;
    END;

    LOCAL PROCEDURE InitBankDataConversionPmtType@21();
    VAR
      BankDataConversionPmtType@1000 : Record 1281;
    BEGIN
      IF NOT BankDataConversionPmtType.FINDFIRST THEN BEGIN
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode1Tok,BankDataConvPmtTypeDesc1Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode2Tok,BankDataConvPmtTypeDesc2Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode3Tok,BankDataConvPmtTypeDesc3Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode4Tok,BankDataConvPmtTypeDesc4Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode5Tok,BankDataConvPmtTypeDesc5Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode6Tok,BankDataConvPmtTypeDesc6Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode7Tok,BankDataConvPmtTypeDesc7Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode8Tok,BankDataConvPmtTypeDesc8Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode9Tok,BankDataConvPmtTypeDesc9Txt);
      END;
    END;

    LOCAL PROCEDURE InitVATRegNrValidationSetup@22();
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      VATLookupExtDataHndl@1001 : Codeunit 248;
    BEGIN
      IF GeneralLedgerSetup.GET THEN
        IF GeneralLedgerSetup."VAT Reg. No. Validation URL" = '' THEN BEGIN
          GeneralLedgerSetup."VAT Reg. No. Validation URL" := VATLookupExtDataHndl.GetVATRegNrValidationWebServiceURL;
          GeneralLedgerSetup.MODIFY;
        END;
    END;

    LOCAL PROCEDURE InitElectronicFormats@23();
    VAR
      ElectronicDocumentFormat@1000 : Record 61;
    BEGIN
      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Inv. - PEPPOL 2.1",ElectronicDocumentFormat.Usage::"Sales Invoice");

      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Cr.M. - PEPPOL2.1",ElectronicDocumentFormat.Usage::"Sales Credit Memo");

      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Serv. Inv. - PEPPOL 2.1",ElectronicDocumentFormat.Usage::"Service Invoice");

      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Exp. Service Cr.M. - PEPPOL2.1",ElectronicDocumentFormat.Usage::"Service Credit Memo");

      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Validation",ElectronicDocumentFormat.Usage::"Sales Validation");

      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Service Validation",ElectronicDocumentFormat.Usage::"Service Validation");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Inv. - PEPPOL 2.0",ElectronicDocumentFormat.Usage::"Sales Invoice");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Cr.M. - PEPPOL2.0",ElectronicDocumentFormat.Usage::"Sales Credit Memo");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Serv. Inv. - PEPPOL 2.0",ElectronicDocumentFormat.Usage::"Service Invoice");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Exp. Service Cr.M. - PEPPOL2.0",ElectronicDocumentFormat.Usage::"Service Credit Memo");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Validation",ElectronicDocumentFormat.Usage::"Sales Validation");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Service Validation",ElectronicDocumentFormat.Usage::"Service Validation");
    END;

    LOCAL PROCEDURE InsertSourceCode@1(VAR SourceCodeDefCode@1000 : Code[10];Code@1001 : Code[10];Description@1002 : Text[50]);
    VAR
      SourceCode@1003 : Record 230;
    BEGIN
      SourceCodeDefCode := Code;
      SourceCode.INIT;
      SourceCode.Code := Code;
      SourceCode.Description := Description;
      SourceCode.INSERT;
    END;

    LOCAL PROCEDURE InsertStandardText@4(Code@1000 : Code[20];Description@1001 : Text[50]);
    VAR
      StandardText@1002 : Record 7;
    BEGIN
      StandardText.INIT;
      StandardText.Code := Code;
      StandardText.Description := Description;
      StandardText.INSERT;
    END;

    LOCAL PROCEDURE InsertRepSelection@2(ReportUsage@1000 : Integer;Sequence@1001 : Code[10];ReportID@1002 : Integer);
    VAR
      ReportSelections@1003 : Record 77;
    BEGIN
      ReportSelections.INIT;
      ReportSelections.Usage := ReportUsage;
      ReportSelections.Sequence := Sequence;
      ReportSelections."Report ID" := ReportID;
      ReportSelections.INSERT;
    END;

    LOCAL PROCEDURE PageName@5(PageID@1000 : Integer) : Text[50];
    VAR
      ObjectTranslation@1001 : Record 377;
    BEGIN
      EXIT(COPYSTR(ObjectTranslation.TranslateObject(ObjectTranslation."Object Type"::Page,PageID),1,30));
    END;

    LOCAL PROCEDURE ReportName@6(ReportID@1000 : Integer) : Text[50];
    VAR
      ObjectTranslation@1001 : Record 377;
    BEGIN
      EXIT(COPYSTR(ObjectTranslation.TranslateObject(ObjectTranslation."Object Type"::Report,ReportID),1,30));
    END;

    LOCAL PROCEDURE InsertClientAddIns@8();
    VAR
      ClientAddIn@1000 : Record 2000000069;
    BEGIN
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.DynamicsOnlineConnect','31bf3856ad364e35','',
        ClientAddIn.Category::"DotNet Control Add-in",
        'Microsoft Dynamics Online Connect control add-in','');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.BusinessChart','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Dynamics BusinessChart control add-in',
        APPLICATIONPATH + 'Add-ins\BusinessChart\Microsoft.Dynamics.Nav.Client.BusinessChart.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.TimelineVisualization','31bf3856ad364e35','',
        ClientAddIn.Category::"DotNet Control Add-in",
        'Interactive visualizion for a timeline of events','');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.PingPong','31bf3856ad364e35','',
        ClientAddIn.Category::"DotNet Control Add-in",
        'Microsoft Dynamics PingPong control add-in','');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.VideoPlayer','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Dynamics VideoPlayer control add-in',
        APPLICATIONPATH + 'Add-ins\VideoPlayer\Microsoft.Dynamics.Nav.Client.VideoPlayer.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.PageReady','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Dynamics PageReady control add-in',
        APPLICATIONPATH + 'Add-ins\PageReady\Microsoft.Dynamics.Nav.Client.PageReady.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.SocialListening','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Social Listening control add-in',
        APPLICATIONPATH + 'Add-ins\SocialListening\Microsoft.Dynamics.Nav.Client.SocialListening.zip');
    END;

    LOCAL PROCEDURE InsertClientAddIn@17(ControlAddInName@1000 : Text[220];PublicKeyToken@1001 : Text[20];Version@1002 : Text[25];Category@1006 : Option;Description@1003 : Text[250];ResourceFilePath@1005 : Text[250]);
    VAR
      ClientAddIn@1004 : Record 2000000069;
    BEGIN
      IF ClientAddIn.GET(ControlAddInName,PublicKeyToken,Version) THEN
        EXIT;

      ClientAddIn.INIT;
      ClientAddIn."Add-in Name" := ControlAddInName;
      ClientAddIn."Public Key Token" := PublicKeyToken;
      ClientAddIn.Version := Version;
      ClientAddIn.Category := Category;
      ClientAddIn.Description := Description;
      IF EXISTS(ResourceFilePath) THEN
        ClientAddIn.Resource.IMPORT(ResourceFilePath);
      IF ClientAddIn.INSERT THEN;
    END;

    LOCAL PROCEDURE InsertJobWIPMethod@7(Code@1000 : Code[20];Description@1001 : Text[50];RecognizedCosts@1002 : Option;RecognizedSales@1003 : Option;SystemDefinedIndex@1004 : Integer);
    VAR
      JobWIPMethod@1005 : Record 1006;
    BEGIN
      JobWIPMethod.INIT;
      JobWIPMethod.Code := Code;
      JobWIPMethod.Description := Description;
      JobWIPMethod."WIP Cost" := TRUE;
      JobWIPMethod."WIP Sales" := TRUE;
      JobWIPMethod."Recognized Costs" := RecognizedCosts;
      JobWIPMethod."Recognized Sales" := RecognizedSales;
      JobWIPMethod.Valid := TRUE;
      JobWIPMethod."System Defined" := TRUE;
      JobWIPMethod."System-Defined Index" := SystemDefinedIndex;
      JobWIPMethod.INSERT;
    END;

    LOCAL PROCEDURE InsertBankExportImportSetup@16(CodeTxt@1000 : Text[20];NameTxt@1001 : Text[100];DirectionOpt@1002 : Option;CodeunitID@1003 : Integer;XMLPortID@1004 : Integer;CheckCodeunitID@1006 : Integer);
    VAR
      BankExportImportSetup@1005 : Record 1200;
    BEGIN
      WITH BankExportImportSetup DO BEGIN
        INIT;
        Code := CodeTxt;
        Name := NameTxt;
        Direction := DirectionOpt;
        "Processing Codeunit ID" := CodeunitID;
        "Processing XMLport ID" := XMLPortID;
        "Check Export Codeunit" := CheckCodeunitID;
        "Preserve Non-Latin Characters" := FALSE;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertBankClearingStandard@12(CodeText@1001 : Text[50];DescriptionText@1002 : Text[80]);
    VAR
      BankClearingStandard@1000 : Record 1280;
    BEGIN
      WITH BankClearingStandard DO BEGIN
        INIT;
        Code := CodeText;
        Description := DescriptionText;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertBankDataConversionPmtType@20(CodeText@1001 : Text[50];DescriptionText@1002 : Text[80]);
    VAR
      BankDataConversionPmtType@1000 : Record 1281;
    BEGIN
      WITH BankDataConversionPmtType DO BEGIN
        INIT;
        Code := CodeText;
        Description := DescriptionText;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertElectronicFormat@24(Code@1000 : Code[20];Description@1001 : Text[250];CodeunitID@1002 : Integer;Usage@1004 : Option);
    VAR
      ElectronicDocumentFormat@1003 : Record 61;
    BEGIN
      IF ElectronicDocumentFormat.GET(Code,Usage) THEN
        EXIT;

      ElectronicDocumentFormat.INIT;
      ElectronicDocumentFormat.Code := Code;
      ElectronicDocumentFormat.Description := Description;
      ElectronicDocumentFormat."Codeunit ID" := CodeunitID;
      ElectronicDocumentFormat.Usage := Usage;
      ElectronicDocumentFormat.INSERT;
    END;

    LOCAL PROCEDURE InitExampleAddOn@50000();
    VAR
      ExampleSetup@50000 : Record 50000;
    BEGIN
      WITH ExampleSetup DO
        InitSetupRecord;

    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 221 Resource-Find Price
{
  OBJECT-PROPERTIES
  {
    Date=16-11-15;
    Time=13:37:29;
    Modified=Yes;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    TableNo=201;
    OnRun=BEGIN
            ResPrice.COPY(Rec);
            WITH ResPrice DO
              IF FindResPrice THEN
                ResPrice := ResPrice2
              ELSE BEGIN
                INIT;
                Code := Res."No.";
                "Currency Code" := '';
                "Unit Price" := Res."Unit Price";
              END;
            Rec := ResPrice;
          END;

  }
  CODE
  {
    VAR
      ResPrice@1000 : Record 201;
      ResPrice2@1001 : Record 201;
      Res@1002 : Record 156;

    LOCAL PROCEDURE FindResPrice@1() : Boolean;
    BEGIN
      WITH ResPrice DO BEGIN
        IF ResPrice2.GET(Type::Resource,Code,"Work Type Code","Currency Code", TRUE) THEN
          EXIT(TRUE);

        IF ResPrice2.GET(Type::Resource,Code,"Work Type Code","Currency Code") THEN
          EXIT(TRUE);

        IF ResPrice2.GET(Type::Resource,Code,"Work Type Code",'') THEN
          EXIT(TRUE);

        Res.GET(Code);
        IF ResPrice2.GET(Type::"Group(Resource)",Res."Resource Group No.","Work Type Code","Currency Code") THEN
          EXIT(TRUE);

        IF ResPrice2.GET(Type::"Group(Resource)",Res."Resource Group No.","Work Type Code",'') THEN
          EXIT(TRUE);

        IF ResPrice2.GET(Type::All,'',"Work Type Code","Currency Code") THEN
          EXIT(TRUE);

        IF ResPrice2.GET(Type::All,'',"Work Type Code",'') THEN
          EXIT(TRUE);
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50011 Example Enabled iFace
{
  OBJECT-PROPERTIES
  {
    Date=04-11-15;
    Time=19:51:56;
    Modified=Yes;
    Version List=Exercise 1;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CheckEnabled@2() : Boolean;
    VAR
      UserSetup@1000 : Record 91;
      ExampleSetup@1001 : Record 50000;
    BEGIN
      IF USERID <> '' THEN
        IF UserSetup.GET(USERID) THEN
          IF UserSetup."Example Enabled" THEN
            EXIT(TRUE);

      WITH ExampleSetup DO BEGIN
        GET;
        EXIT("Example Enabled");
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 50098 Example Testrunner
{
  OBJECT-PROPERTIES
  {
    Date=04-11-15;
    Time=19:54:13;
    Modified=Yes;
    Version List=Exercise 1;
  }
  PROPERTIES
  {
    Subtype=TestRunner;
    TestIsolation=Codeunit;
    OnRun=VAR
            ExampleTest@50000 : Codeunit 50099;
          BEGIN
            ExampleTest.RUN;
          END;

  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Codeunit 50099 Example Test
{
  OBJECT-PROPERTIES
  {
    Date=26-11-15;
    Time=13:51:26;
    Modified=Yes;
    Version List=Exercise 1;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [Test]
    PROCEDURE TestInitSetup@50000();
    VAR
      ExampleSetup@50000 : Record 50000;
    BEGIN
      WITH ExampleSetup DO BEGIN
        InitSetupRecord;
        GET;
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Page 119 User Setup
{
  OBJECT-PROPERTIES
  {
    Date=04-11-15;
    Time=19:49:27;
    Modified=Yes;
    Version List=NAVW17.00,Exercise 1;
  }
  PROPERTIES
  {
    CaptionML=ENU=User Setup;
    SourceTable=Table91;
    PageType=List;
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr="User ID" }

    { 4   ;2   ;Field     ;
                SourceExpr="Allow Posting From" }

    { 6   ;2   ;Field     ;
                SourceExpr="Allow Posting To" }

    { 8   ;2   ;Field     ;
                SourceExpr="Register Time" }

    { 15  ;2   ;Field     ;
                SourceExpr="Sales Resp. Ctr. Filter" }

    { 17  ;2   ;Field     ;
                SourceExpr="Purchase Resp. Ctr. Filter" }

    { 21  ;2   ;Field     ;
                SourceExpr="Service Resp. Ctr. Filter" }

    { 3   ;2   ;Field     ;
                SourceExpr="Time Sheet Admin." }

    { 50000;2  ;Field     ;
                SourceExpr="Example Enabled" }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Page 1310 Mini Activities
{
  OBJECT-PROPERTIES
  {
    Date=16-11-15;
    Time=13:54:01;
    Modified=Yes;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Activities;
    SourceTable=Table1313;
    PageType=CardPart;
    ShowFilter=No;
    OnInit=BEGIN
             UpdateGroupsVisibility;
             AutoPlayWelcomeVideo := VideoVisible AND MiniGettingStartedMgt.ShouldWelcomeVideoBePlayed;
           END;

    OnOpenPage=BEGIN
                 RESET;
                 IF NOT GET THEN BEGIN
                   INIT;
                   INSERT;
                 END;
                 SETFILTER("Due Date Filter",'>=%1',WORKDATE);
                 SETFILTER("Overdue Date Filter",'<%1',WORKDATE);
                 SETFILTER("User ID Filter",USERID);

                 HasCamera := CameraProvider.IsAvailable;
                 IF HasCamera THEN
                   CameraProvider := CameraProvider.Create;
               END;

    OnAfterGetRecord=VAR
                       DocExchServiceSetup@1000 : Record 1275;
                     BEGIN
                       CalculateCueFieldValues;
                       ShowDocumentsPendingDocExchService := FALSE;
                       IF DocExchServiceSetup.GET THEN
                         ShowDocumentsPendingDocExchService := DocExchServiceSetup.Enabled;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           IF GettingStartedVisible <> MiniGettingStartedMgt.IsGettingStartedVisible THEN BEGIN
                             UpdateGroupsVisibility;
                             CurrPage.UPDATE;
                           END;
                         END;

    ActionList=ACTIONS
    {
      { 6       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 7       ;1   ;Action    ;
                      Name=Set Up Cues;
                      CaptionML=ENU=Set Up Cues;
                      Image=Setup;
                      OnAction=VAR
                                 CueRecordRef@1000 : RecordRef;
                               BEGIN
                                 CueRecordRef.GETTABLE(Rec);
                                 CueSetup.OpenCustomizePageForCurrentUser(CueRecordRef.NUMBER);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 16  ;1   ;Group     ;
                CaptionML=ENU=Getting Started;
                Visible=GettingStartedVisible;
                GroupType=CueGroup;
                ActionList=ACTIONS
                {
                  { 12      ;    ;Action    ;
                                  Name=WelcomeIntroductionVideo;
                                  CaptionML=ENU=Welcome!;
                                  ToolTipML=ENU=Watch a short video to learn five things you need to know first.;
                                  Visible=VideoVisible;
                                  Image=TileVideo;
                                  OnAction=BEGIN
                                             MiniGettingStartedMgt.PlayWelcomeVideoForWebClient;
                                           END;
                                            }
                  { 14      ;    ;Action    ;
                                  Name=SettingupYourSystem;
                                  CaptionML=ENU=Setting Up Your System;
                                  ToolTipML=ENU=Watch a video to learn how to set up the system for your needs.;
                                  Visible=VideoVisible;
                                  Image=TileVideo;
                                  OnAction=BEGIN
                                             CASE CURRENTCLIENTTYPE OF
                                               CLIENTTYPE::Tablet:
                                                 MiniGettingStartedMgt.PlaySettingUpYourSystemVideoForTablet;
                                               ELSE
                                                 MiniGettingStartedMgt.PlaySettingUpYourSystemVideoForWebClient;
                                             END;
                                           END;
                                            }
                  { 13      ;    ;Action    ;
                                  Name=ManageYourBusiness;
                                  CaptionML=ENU=Manage Your Business;
                                  ToolTipML=ENU=Learn about how to do your business tasks.;
                                  Image=TileHelp }
                }
                 }

    { 10  ;1   ;Group     ;
                CaptionML=ENU=Sales;
                GroupType=CueGroup }

    { 2   ;2   ;Field     ;
                ToolTipML=ENU=Shows the number of open sales invoices.;
                SourceExpr="Ongoing Sales Invoices";
                DrillDownPageID=Mini Sales Invoice List }

    { 20  ;2   ;Field     ;
                ToolTipML=ENU=Shows the number of open sales quotes.;
                SourceExpr="Ongoing Sales Quotes";
                DrillDownPageID=Mini Sales Quotes List }

    { 17  ;2   ;Field     ;
                ToolTipML=ENU=Shows the sum of overdue payments from customers.;
                SourceExpr="Overdue Sales Invoice Amount";
                OnDrillDown=BEGIN
                              MiniActivitiesMgt.DrillDownCalcOverdueSalesInvoiceAmount;
                            END;
                             }

    { 3   ;2   ;Field     ;
                ToolTipML=ENU=Shows the sum of sales in the current month.;
                SourceExpr="Sales This Month";
                DrillDownPageID=Mini Sales Invoice List;
                OnDrillDown=BEGIN
                              MiniActivitiesMgt.DrillDownSalesThisMonth;
                            END;
                             }

    { 4   ;2   ;Field     ;
                ToolTipML=ENU=The share of sales this year made to the ten largest customers.;
                SourceExpr="Top 10 Customer Sales YTD" }

    { 28  ;1   ;Group     ;
                CaptionML=ENU=Document Exchange Service;
                Visible=ShowDocumentsPendingDocExchService;
                GroupType=CueGroup }

    { 27  ;2   ;Field     ;
                SourceExpr="Sales Inv. - Pending Doc.Exch.";
                Visible=ShowDocumentsPendingDocExchService;
                DrillDownPageID=Mini Posted Sales Invoices }

    { 26  ;2   ;Field     ;
                SourceExpr="Sales CrM. - Pending Doc.Exch.";
                Visible=ShowDocumentsPendingDocExchService;
                DrillDownPageID=Mini Posted Sales Credit Memos }

    { 9   ;1   ;Group     ;
                CaptionML=ENU=Purchases;
                GroupType=CueGroup }

    { 5   ;2   ;Field     ;
                ToolTipML=ENU=Shows the number of open purchase invoices.;
                SourceExpr="Ongoing Purchase Invoices";
                DrillDownPageID=Mini Purchase Invoice List }

    { 18  ;2   ;Field     ;
                ToolTipML=ENU=Shows the sum of your overdue payments to vendors.;
                SourceExpr="Overdue Purch. Invoice Amount";
                OnDrillDown=BEGIN
                              MiniActivitiesMgt.DrillDownOverduePurchaseInvoiceAmount;
                            END;
                             }

    { 24  ;1   ;Group     ;
                CaptionML=ENU=Approvals;
                Visible=FALSE;
                GroupType=CueGroup }

    { 25  ;2   ;Field     ;
                ToolTipML=ENU=Shows the number of approval requests that require your approval.;
                SourceExpr="Requests to Approve";
                DrillDownPageID=Requests to Approve }

    { 8   ;1   ;Group     ;
                CaptionML=ENU=Financial Performance;
                GroupType=CueGroup }

    { 19  ;2   ;Field     ;
                ToolTipML=ENU=Specifies how long customers took to pay invoices in the last three months. This is the average number of days from when invoices are issued to when customers pay the invoices.;
                SourceExpr="Average Collection Days";
                Image=Calendar }

    { 33  ;1   ;Group     ;
                CaptionML=ENU=Camera;
                Visible=HasCamera;
                GroupType=CueGroup;
                ActionList=ACTIONS
                {
                  { 21      ;    ;Action    ;
                                  Name=CreateIncomingDocumentFromCamera;
                                  CaptionML=ENU=Create Incoming Doc. from Camera;
                                  Image=TileCamera;
                                  OnAction=VAR
                                             CameraOptions@1000 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Capabilities.CameraOptions";
                                           BEGIN
                                             IF NOT HasCamera THEN
                                               EXIT;

                                             CameraOptions := CameraOptions.CameraOptions;
                                             CameraOptions.Quality := 100; // 100%
                                             CameraProvider.RequestPictureAsync(CameraOptions);
                                           END;
                                            }
                }
                 }

    { 34  ;1   ;Group     ;
                CaptionML=ENU=Incoming Documents;
                GroupType=CueGroup }

    { 30  ;2   ;Field     ;
                SourceExpr="My Incoming Documents" }

    { 15  ;1   ;Group     ;
                Visible=AutoPlayWelcomeVideo;
                GroupType=Group }

    { 11  ;2   ;Field     ;
                Name=WebClientPageReady;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.PageReady;PublicKeyToken=31bf3856ad364e35] }

  }
  CODE
  {
    VAR
      MiniGettingStartedMgt@1001 : Codeunit 1321;
      FileManagement@1003 : Codeunit 419;
      MiniActivitiesMgt@1009 : Codeunit 1311;
      CueSetup@1005 : Codeunit 9701;
      CameraProvider@1007 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Capabilities.CameraProvider" WITHEVENTS RUNONCLIENT;
      GettingStartedVisible@1002 : Boolean INDATASET;
      VideoVisible@1000 : Boolean INDATASET;
      AutoPlayWelcomeVideo@1004 : Boolean INDATASET;
      HasCamera@1008 : Boolean;
      ShowDocumentsPendingDocExchService@1006 : Boolean;

    LOCAL PROCEDURE CalculateCueFieldValues@6();
    BEGIN
      IF FIELDACTIVE("Overdue Sales Invoice Amount") THEN
        "Overdue Sales Invoice Amount" := MiniActivitiesMgt.CalcOverdueSalesInvoiceAmount;
      IF FIELDACTIVE("Overdue Purch. Invoice Amount") THEN
        "Overdue Purch. Invoice Amount" := MiniActivitiesMgt.CalcOverduePurchaseInvoiceAmount;
      IF FIELDACTIVE("Sales This Month") THEN
        "Sales This Month" := MiniActivitiesMgt.CalcSalesThisMonthAmount;
      IF FIELDACTIVE("Top 10 Customer Sales YTD") THEN
        "Top 10 Customer Sales YTD" := MiniActivitiesMgt.CalcTop10CustomerSalesRatioYTD;
      IF FIELDACTIVE("Average Collection Days") THEN
        "Average Collection Days" := MiniActivitiesMgt.CalcAverageCollectionDays;
    END;

    LOCAL PROCEDURE WelcomeVideoDisplayTargetIsSupported@4() : Boolean;
    BEGIN
      EXIT(CURRENTCLIENTTYPE = CLIENTTYPE::Web);
    END;

    LOCAL PROCEDURE UpdateGroupsVisibility@9();
    BEGIN
      GettingStartedVisible := MiniGettingStartedMgt.IsGettingStartedVisible;
      VideoVisible := GettingStartedVisible AND WelcomeVideoDisplayTargetIsSupported;
    END;

    EVENT WebClientPageReady@-11::AddInReady@0();
    BEGIN
      IF FileManagement.IsWebClient THEN
        MiniGettingStartedMgt.PlayWelcomeVideoOnFirstLogin;
    END;

    EVENT CameraProvider@1007::PictureAvailable@10(PictureName@1001 : Text;PictureFilePath@1000 : Text);
    VAR
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocument.CreateIncomingDocumentFromServerFile(PictureName,PictureFilePath);
      CurrPage.UPDATE;
    END;

    BEGIN
    END.
  }
}

OBJECT Page 50000 Example Setup
{
  OBJECT-PROPERTIES
  {
    Date=26-11-15;
    Time=14:04:04;
    Modified=Yes;
    Version List=Exercise 1;
  }
  PROPERTIES
  {
    CaptionML=ENU=Example Setup;
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table50000;
    PageType=Card;
    OnOpenPage=BEGIN
                 InitSetupRecord;
               END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=ENU=General }

    { 2   ;2   ;Field     ;
                SourceExpr="Example Enabled" }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {

    BEGIN
    END.
  }
}

